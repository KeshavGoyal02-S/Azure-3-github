pipeline {
    agent any
    environment {
        SF_CONSUMER_KEY = "${env.SF_CONSUMER_KEY}"
        SF_USERNAME = "${env.SF_USERNAME}"
        SF_INSTANCE_URL = "${env.SF_INSTANCE_URL ?: 'https://login.salesforce.com'}"
    }
    tools {
        // You MUST configure a NodeJS tool in Jenkins > Manage Jenkins > Global Tool Configuration
        // with the name 'NodeJS 18.x' for this pipeline to work.
        nodejs 'NodeJS 18.x'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    def branchName = env.GIT_BRANCH.replaceFirst('origin/', '')
                    echo "Checking branch name..."
                    echo "Current branch: ${branchName}"
                }
            }
        }
        
        stage('Install Salesforce CLI') {
            steps {
                sh 'npm install sfdx-cli -g'
            }
        }
        
        stage('Authorize Salesforce Org') {
            steps {
                withCredentials([file(credentialsId: 'SF_SERVER_KEY', variable: 'server_key_file')]) {
                    sh '''
                        sfdx force:auth:jwt:grant \\
                          --clientid ''' + SF_CONSUMER_KEY + ''' \\
                          --jwtkeyfile ''' + server_key_file + ''' \\
                          --username ''' + SF_USERNAME + ''' \\
                          --instanceurl ''' + SF_INSTANCE_URL + '''
                    '''
                }
            }
        }
        
        stage('Run PMD Analysis') {
            steps {
                tool 'JDK 11'
                sh '''
                    curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
                    unzip -o -q pmd.zip
                '''
                sh '''
                    mkdir -p pmd-reports
                    ./pmd-bin-6.55.0/bin/run.sh pmd \\
                      -d force-app/main/default/classes \\
                      -R apex-ruleset.xml \\
                      -f html \\
                      -r pmd-reports/pmd-report.html
                '''
                // This step will make the build fail if PMD finds issues.
                sh 'test -s pmd-reports/pmd-report.html'
                archiveArtifacts artifacts: 'pmd-reports/**'
            }
        }
        
        stage('Validate Metadata') {
            steps {
                echo 'Performing a validation-only deployment to ensure changes can be deployed.'
                sh 'sfdx force:source:convert --rootdir force-app --outputdir deploy-package'
                sh '''
                    sfdx force:mdapi:deploy \\
                      -u ''' + SF_USERNAME + ''' \\
                      --checkonly \\
                      -d ./deploy-package \\
                      --testlevel RunLocalTests \\
                      -w 10
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Build validation failed. Check logs for details.'
            // Add email notification logic here
        }
        success {
            echo 'Build validation successful. Merging into the main branch is now safe.'
        }
    }
}
